import java.io.*;
import java.util.*;

public class Main {

  public static void solution(char[][] arr, String[] words, int vidx) {
    //write your code here
    if(vidx == words.length){
      print(arr);
      return ;
    }
    String word = words[vidx];

    for(int i =0 ;i < arr.length ; i++){
      for(int j = 0 ;j < arr[0].length ; j++){
        if(arr[i][j] !='+'){
          if(canPlaceHorzally(arr, word , i , j)){
            boolean []wePlaced = placeHorzally(arr , word , i , j );
            solution(arr , words , vidx+1);
            unPlaceHorzally(arr , wePlaced , i , j);
          }
          if(canPlaceVerlly(arr, word ,i , j )){
            // System.out.println("'kk'");
            boolean []wePlaced = palceVerlly(arr , word , i , j );            
            solution(arr , words , vidx+1);
            unPlaceVerlly(arr , wePlaced , i , j);
          }
        }
      }
    }
  }
  public static boolean canPlaceHorzally(char [][] arr , String word , int i , int j ){
    //check for left of j is not zero and there is no '-'.
    if(j-1 > 0 && arr[i][j-1] == '-')return false;
    // check for right of j+word.length() is not end of arr[i] and there is no '-'.
    if(j+word.length() < arr[i].length && arr[i][j+word.length()] == '-')return false;
   
    for(int jj = 0 ; jj < word.length() ; jj++){
      // check for the word not spreading out of array.
      if(j+jj >= arr[i].length)return false;

      //check for '-' and wether the charecters of  the word are already placed at right position are not. 
      if(arr[i][j+jj] == '-' || arr[i][j+jj] == word.charAt(jj))continue;
      else return false;
    }
    
    return true;
  }
  public static boolean canPlaceVerlly(char [][] arr , String word , int i , int j ){
    //check for top of i is not zero and there is no '-'.
    if(i-1 > 0 && arr[i-1][j] == '-')return false;
    // check for right of i+word.length() is not end of arr and there is no '-'.
    if(i+word.length() < arr.length && arr[i+word.length()][j] == '-')return false;

    for(int ii = 0 ; ii < word.length() ; ii++){
      // check for the word not spreading out of array.
      if(i+ii >= arr.length)return false;

      //check for '-' and wether the charecters of  the word are already placed at right position are not. 
      if(arr[i+ii][j] == '-' || arr[i+ii][j] == word.charAt(ii))continue;
      else return false;
    }

    return true;
  }
  public static boolean[] placeHorzally(char [][]arr , String word , int i , int j){
    boolean [] wePlaced = new boolean[word.length()];
    
    //check wether there is '-' if yes thenonly place corresponding char and mark true at corresponding wePlaced index.
    for(int jj= 0 ; jj < word.length() ; jj++){
      if(arr[i][j+jj] == '-' ){
        arr[i][j+jj] = word.charAt(jj);
        wePlaced[jj] = true;
      }
    }

    return wePlaced ;
  }
  public static boolean[] palceVerlly(char [][]arr , String word , int i , int j){
    boolean [] wePlaced = new boolean[word.length()];

    //check wether there is '-' if yes thenonly place corresponding char and mark true at coresponding wePlaced index.
    for(int ii= 0 ; ii < word.length() ; ii++){
      if(arr[i+ii][j] == '-' ){
        arr[i+ii][j] = word.charAt(ii);
        wePlaced[ii] = true;
      }
    }

    return wePlaced;
  }

  public static void unPlaceHorzally(char [][]arr , boolean [] wePlaced , int i ,int j){
    //check if wePlaced that charecter at this level if yes thenonly repalce it with '-'.
    for(int jj = 0 ;jj < wePlaced.length ; jj++){
      if(wePlaced[jj] == true){
        arr[i][j+jj] = '-';
      }
    }
  }
  public static void unPlaceVerlly(char [][]arr , boolean [] wePlaced , int i ,int j){
    //check if wePlaced that charecter at this level if yes thenonly repalce it with '-'.
    for(int ii = 0 ;ii < wePlaced.length ; ii++){
      if(wePlaced[ii] == true){
        arr[i+ii][j] = '-';
      }
    }
  }

  public static void print(char[][] arr) {
    for (int i = 0 ; i < arr.length; i++) {
      for (int j = 0 ; j < arr.length; j++) {
        System.out.print(arr[i][j]);
      }
      System.out.println();
    }

  }

  
  public static void main(String[] args) {
    Scanner scn = new Scanner(System.in);
    char[][] arr = new char[10][10];
    for (int i = 0 ; i < arr.length; i++) {
      String str = scn.next();
      arr[i] = str.toCharArray();
    }
    int n = scn.nextInt();
    String[] words = new String[n];
    for (int i = 0 ; i  < words.length; i++) {
      words[i] = scn.next();
    }
    solution(arr, words, 0);
  }
}