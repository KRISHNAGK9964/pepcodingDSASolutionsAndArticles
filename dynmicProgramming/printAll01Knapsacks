import java.io.*;
import java.util.*;

public class Main {
    public static class Pair{
        int idx;
        int cap;
        String psf;
        Pair(int idx , int cap , String psf){
            this.idx = idx;
            this.cap = cap;
            this.psf = psf;
        }
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());

        int[] values = new int[n];
        String str1 = br.readLine();
        for (int i = 0; i < n; i++) {
            values[i] = Integer.parseInt(str1.split(" ")[i]);
        }

        int[] wts = new int[n];
        String str2 = br.readLine();
        for (int i = 0; i < n; i++) {
            wts[i] = Integer.parseInt(str2.split(" ")[i]);
        }

        int cap = Integer.parseInt(br.readLine());

        //write your code here

        int[][] dp = new int[n+1][cap+1];
        for (int i = 0; i < n+1; i++) {
            for (int j = 0; j < cap+1; j++) {
                if(i== 0 || j==0)dp[i][j] = 0;
                else{
                    int wt = wts[i-1], value = values[i-1];
                    if(wt <= j){
                        dp[i][j] = Math.max(dp[i-1][j] , dp[i-1][j-wt]+value);
                    }else{
                        dp[i][j] = dp[i-1][j];
                    }
                }
                // System.out.print(dp[i][j]+"-");
            }
            // System.out.println();
        }

        System.out.println(dp[n][cap]);
        if(dp[n][cap] == 0 )return;
        Queue<Pair> que = new ArrayDeque<>();
        que.add(new Pair(n , cap , ""));
        while(que.size() >0){
            Pair rp= que.remove();
            // System.out.println(rp.psf + "-" + rp.cap);
            if(dp[rp.idx][rp.cap]==0)System.out.println(rp.psf);
            else{
                int wt = wts[rp.idx-1];
                int val = values[rp.idx-1];

                int c = rp.cap-wt>=0?dp[rp.idx-1][rp.cap - wt] + val:0;
                int nc = dp[rp.idx-1][rp.cap];
                if( dp[rp.idx][rp.cap] == c){
                    que.add(new Pair(rp.idx-1 , rp.cap - wt , rp.idx-1+" "+rp.psf));
                }
                if(dp[rp.idx][rp.cap] == nc){
                    que.add(new Pair(rp.idx-1 , rp.cap , rp.psf));
                }
            }

            
        }
        
    }
}