#include <iostream>
#include <vector>

using namespace std;

void unboundedKnapsack(int n,vector<int> val, vector<int> weight,int cap){
    
// write your code here

vector<int>dp(cap+1);
dp[0]=0;
for(int i=0;i<dp.size();i++){
  for(int j=0;j<weight.size();j++){
    
    if(weight[j]<=i){
      dp[i]=max(dp[i],dp[i-weight[j]]+val[j]);
    }
  }
}
cout<<dp[cap]<<endl;
    
}


int main() {

  int n;
  cin>>n;
  vector<int> val(n);
  for (int i = 0; i < n; i++) {

    cin>>val[i];
  }
  vector<int> weight(n);
  for (int i = 0; i < n; i++) {
    cin>>weight[i];
  }
  int cap;
  cin>>cap;
  
  unboundedKnapsack(n,val, weight,cap);
  

}