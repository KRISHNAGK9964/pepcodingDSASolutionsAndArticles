#include <iostream>
#include <vector>

using namespace std;

void zeroOneKnapsack(int n,vector<int> val, vector<int> weight,int cap){
 
//  write your code here

      vector<vector<int>> dp(n+1,vector<int>(cap+1));
      for(int i=0;i<dp.size();i++){
        for(int j=0;j<dp[0].size();j++){
          if(i==0 and j==0){
            dp[i][j]=0;
          }else if(i==0){
            dp[i][j]=0;

          }else if(j==0){
            dp[i][j]=0;
          }else{
            int rc=j-weight[i-1];
            int currval=val[i-1];
            if(rc>=0){
            dp[i][j]=max(dp[i-1][j],dp[i-1][rc]+currval);
            }else{
              dp[i][j]=dp[i-1][j];
            }
          }
        }
      }
    cout<<dp[n][cap]<<endl;
}

int main() {
    
  int n;
  cin >> n;
  
  vector<int> val(n);
  for (int i = 0; i < n; i++) {
    cin >> val[i];
  }
  
  vector<int> weight(n);
  for (int i = 0; i < n; i++) {
    cin >> weight[i];
  }
  
  int cap;
  cin >> cap;
  
  zeroOneKnapsack(n,val,weight,cap);


}