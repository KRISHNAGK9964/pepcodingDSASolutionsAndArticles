import java.io.*;
import java.util.*;

public class Main {

   private static class Pair {
      String psf;
      int i;
      int j;

      public Pair(String psf, int i, int j) {
         this.psf = psf;
         this.i = i;
         this.j = j;
      }
   }
   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
      int n = Integer.parseInt(br.readLine());
      int m = Integer.parseInt(br.readLine());
      int[][] arr = new int[n][m];

      for (int i = 0; i < n; i++) {
         String str = br.readLine();
         for (int j = 0; j < m; j++) {
            arr[i][j] = Integer.parseInt(str.split(" ")[j]);
            if(n==1 && j==0){
               System.out.print("1 ");
            }else if(n==1){
               System.out.print("d2 ");
            }
         }
      }
      if(n==1)return ;
      //write your code here
      int maxGold = Integer.MIN_VALUE;
      for(int j = arr[0].length -2 ; j >= 0;j--){
         for (int i = arr.length-1; i >= 0; i--) {
            if(i == arr.length - 1){
               arr[i][j] += Math.max(arr[i][j+1] , arr[i-1][j+1]);
            }else if(i == 0){
               arr[i][j] += Math.max(arr[i][j+1] , arr[i+1][j+1]);
            }else{
               arr[i][j] += Math.max(arr[i][j+1] , Math.max(arr[i+1][j+1] , arr[i-1][j+1]));
            }

            if(j == 0){
               maxGold = Math.max(maxGold , arr[i][j]);
            }
         }
      }
      System.out.println(maxGold);
      Queue<Pair> que = new ArrayDeque<>();
      for (int i = 0; i < arr.length; i++) {
         if(arr[i][0] == maxGold)que.add(new Pair(i+" " , i , 0));
      }
      
      while(que.size() > 0){
         Pair rp = que.remove();
         if(rp.j == arr[0].length-1){
            System.out.println(rp.psf);
         }
         else{
            int i = rp.i , j = rp.j;
            if(rp.i == arr.length - 1){
               if(arr[i][j+1] <= arr[i-1][j+1]){
                  que.add(new Pair(rp.psf+"d1 " , rp.i-1 , rp.j+1));
               }
               if(arr[i][j+1] >= arr[i-1][j+1]){
                  que.add(new Pair(rp.psf+"d2 " , rp.i , rp.j+1));
               }
            }else if(rp.i == 0){
               if(arr[i][j+1] > arr[i+1][j+1]){
                  que.add(new Pair(rp.psf+"d2 " , rp.i , rp.j+1));
               }
               if(arr[i][j+1] < arr[i+1][j+1]){
                  que.add(new Pair(rp.psf+"d3 " , rp.i+1 , rp.j+1));
               }
            }else{
               if(arr[i][j+1] <= arr[i-1][j+1] && arr[i+1][j+1] <= arr[i-1][j+1]){
                  que.add(new Pair(rp.psf+"d1 " , rp.i-1 , rp.j+1));
               }
               if(arr[i][j+1] >= arr[i-1][j+1] && arr[i][j+1] >= arr[i+1][j+1]){
                  que.add(new Pair(rp.psf+"d2 " , rp.i , rp.j+1));
               }
               if(arr[i+1][j+1] >= arr[i-1][j+1] && arr[i+1][j+1] >= arr[i][j+1]){
                  que.add(new Pair(rp.psf+"d3 " , rp.i+1 , rp.j+1)); 
               }
            }
         }
      }
   }


}